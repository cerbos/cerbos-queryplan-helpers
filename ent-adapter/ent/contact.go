// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cerbos/cerbos-go-adapters/ent-adapter/ent/company"
	"github.com/cerbos/cerbos-go-adapters/ent-adapter/ent/contact"
	"github.com/cerbos/cerbos-go-adapters/ent-adapter/ent/user"
)

// Contact is the model entity for the Contact schema.
type Contact struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// MarketingOptIn holds the value of the "marketing_opt_in" field.
	MarketingOptIn bool `json:"marketing_opt_in,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactQuery when eager-loading is set.
	Edges            ContactEdges `json:"edges"`
	company_contacts *int
	user_contacts    *int
}

// ContactEdges holds the relations/edges for other nodes in the graph.
type ContactEdges struct {
	// Company holds the value of the company edge.
	Company *Company `json:"company,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) CompanyOrErr() (*Company, error) {
	if e.loadedTypes[0] {
		if e.Company == nil {
			// The edge company was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: company.Label}
		}
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contact) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case contact.FieldActive, contact.FieldMarketingOptIn:
			values[i] = new(sql.NullBool)
		case contact.FieldID:
			values[i] = new(sql.NullInt64)
		case contact.FieldFirstName, contact.FieldLastName:
			values[i] = new(sql.NullString)
		case contact.FieldCreatedAt, contact.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case contact.ForeignKeys[0]: // company_contacts
			values[i] = new(sql.NullInt64)
		case contact.ForeignKeys[1]: // user_contacts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Contact", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contact fields.
func (c *Contact) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contact.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case contact.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case contact.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case contact.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				c.FirstName = value.String
			}
		case contact.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				c.LastName = value.String
			}
		case contact.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				c.Active = value.Bool
			}
		case contact.FieldMarketingOptIn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field marketing_opt_in", values[i])
			} else if value.Valid {
				c.MarketingOptIn = value.Bool
			}
		case contact.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field company_contacts", value)
			} else if value.Valid {
				c.company_contacts = new(int)
				*c.company_contacts = int(value.Int64)
			}
		case contact.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_contacts", value)
			} else if value.Valid {
				c.user_contacts = new(int)
				*c.user_contacts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCompany queries the "company" edge of the Contact entity.
func (c *Contact) QueryCompany() *CompanyQuery {
	return (&ContactClient{config: c.config}).QueryCompany(c)
}

// QueryOwner queries the "owner" edge of the Contact entity.
func (c *Contact) QueryOwner() *UserQuery {
	return (&ContactClient{config: c.config}).QueryOwner(c)
}

// Update returns a builder for updating this Contact.
// Note that you need to call Contact.Unwrap() before calling this method if this Contact
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contact) Update() *ContactUpdateOne {
	return (&ContactClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Contact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contact) Unwrap() *Contact {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contact is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contact) String() string {
	var builder strings.Builder
	builder.WriteString("Contact(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", first_name=")
	builder.WriteString(c.FirstName)
	builder.WriteString(", last_name=")
	builder.WriteString(c.LastName)
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", c.Active))
	builder.WriteString(", marketing_opt_in=")
	builder.WriteString(fmt.Sprintf("%v", c.MarketingOptIn))
	builder.WriteByte(')')
	return builder.String()
}

// Contacts is a parsable slice of Contact.
type Contacts []*Contact

func (c Contacts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
